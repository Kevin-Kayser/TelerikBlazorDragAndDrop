@using BlazorDragAndDrop.Data

    <TelerikCard Class="w-100 mx-3 h-auto">
        <CardHeader>
        <CardTitle>
            <h3>@ListStatus (@Items.Count())</h3>
        </CardTitle>
        </CardHeader>
            <CardBody>
                <div class="d-flex flex-column gap-3 dropzone @dropClass"
                    ondragover="event.preventDefault();"
                    ondragstart="event.dataTransfer.setData('', event.target.id);"
                    @ondrop="HandleDrop"
                    @ondragenter="HandleDragEnter"
                    @ondragleave="HandleDragLeave">

            @foreach (var item in Items)
                    {
                        <Item ItemModel="item"/>
                    }

                </div>
            </CardBody>
        
    </TelerikCard>

@code {

    [CascadingParameter] ItemListContainer Container { get; set; }
    [Parameter] public ItemStatuses ListStatus { get; set; }
    [Parameter] public IList<ItemStatuses> AllowedStatuses { get; set; }

    List<ItemModel> Items = new List<ItemModel>();
    string dropClass = "";

    protected override void OnParametersSet()
    {
        Items.Clear();
        Items.AddRange(Container.Jobs.Where(x => x.Status == ListStatus));
    }

    private void HandleDragEnter()
    {
        if (ListStatus == Container.Payload.Status)
        {
            return;
        }

        if (AllowedStatuses != null && !AllowedStatuses.Contains(Container.Payload.Status))
        {
            dropClass = "no-drop";
        }
        else
        {
            dropClass = "can-drop";
        }
    }

    private void HandleDragLeave()
    {
        dropClass = "";
    }

    private async Task HandleDrop()
    {
        dropClass = "";

        if (AllowedStatuses != null && !AllowedStatuses.Contains(Container.Payload.Status))
        {
            return;
        }

        await Container.UpdateJobAsync(ListStatus);
    }
}